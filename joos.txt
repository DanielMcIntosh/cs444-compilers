LineTerminator:
  char 10
  char 13
  char 10 char 13

Goal:
  InputElement

InputElement:
  WhiteSpace
  Comment
  Token

Token:
  Identifier
  Keyword
  Literal
  Separator
  Operator

WhiteSpace:
  silent
  emit 35
  WhiteSpaceSingle
  WhiteSpace WhiteSpaceSingle

WhiteSpaceSingle:
  char 9
  char 12
  char 32
  char 10
  char 13
  char 10 char 13

Comment:
  silent
  emit 40
  TraditionalComment
  EndOfLineComment

TraditionalComment:
  char / char * CommentTail

EndOfLineComment:
  char / char / LineTerminator
  char / char / CharactersInLine LineTerminator

CommentTail:
  char * CommentTailStar
  NotStar CommentTail

CommentTailStar:
  char /
  char * CommentTailStar
  NotStarNotSlash CommentTail

NotStar:
  inputchar *
  char 10
  char 13
  char 10 char 13

NotStarNotSlash:
  inputchar */
  char 10
  char 13
  char 10 char 13

CharactersInLineSingle:
  inputchar

CharactersInLine:
  CharactersInLineSingle
  CharactersInLine CharactersInLineSingle

Identifier:
  emit 30
  IdentifierChars

IdentifierChars:
  JavaLetter
  IdentifierChars JavaLetterOrDigit

JavaLetter:
  any $ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz

JavaLetterOrDigit:
  any $0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz

Keyword:
  emit 5
  word abstract
  word boolean
  word break
  word byte
  word case
  word catch
  word char
  word class
  word const
  word continue
  word default
  word do
  word double
  word else
  word extends
  word final
  word finally
  word float
  word for
  word goto
  word if
  word implements
  word import
  word instanceof
  word int
  word interface
  word long
  word native
  word new
  word package
  word private
  word protected
  word public
  word return
  word short
  word static
  word strictfp
  word super
  word switch
  word synchronized
  word this
  word throw
  word throws
  word transient
  word try
  word void
  word volatile
  word while

Literal:
  IntegerLiteral
  BooleanLiteral
  CharacterLiteral
  StringLiteral
  NullLiteral

IntegerLiteral:
  emit 10
  DecimalIntegerLiteral

DecimalIntegerLiteral:
  DecimalNumeral

DecimalNumeral:
  any 0
  any 123456789
  NonZeroDigit Digits

Digits:
  Digit
  Digits Digit

Digit:
  any 0123456789

NonZeroDigit:
  any 123456789

BooleanLiteral:
  emit 15
  word true
  word false

CharacterLiteral:
  emit 15
  char ' SingleCharacter char '
  char ' EscapeSequenceChar char '

SingleCharacter:
  inputchar '\

EscapeSequenceChar:
  char \ char b
  char \ char t
  char \ char n
  char \ char f
  char \ char r
  char \ char "
  char \ char '
  char \ char \
  OctalEscapeChar

OctalDigit:
  any 01234567

ZeroToThree:
  any 0123

OctalEscapeChar:
  char \ copy OctalDigit
  char \ copy OctalDigit copy OctalDigit
  char \ copy ZeroToThree copy OctalDigit copy OctalDigit

StringLiteral:
  emit 20
  char " char "
  char " StringCharacters char "

StringCharacters:
  StringCharacter
  StringCharacters StringCharacter

StringCharacter:
  inputchar "\
  EscapeSequenceStr

EscapeSequenceStr:
  char \ char b
  char \ char t
  char \ char n
  char \ char f
  char \ char r
  char \ char "
  char \ char '
  char \ char \
  OctalEscapeStr

OctalEscapeStr:
  char \ copy OctalDigit
  char \ copy OctalDigit copy OctalDigit
  char \ copy ZeroToThree copy OctalDigit copy OctalDigit

NullLiteral:
  emit 15
  word null

Separator:
  emit 15
  word (
  word )
  word {
  word }
  word [
  word ]
  word ;
  word ,
  word .

Operator:
  emit 15
  word =
  word >
  word <
  word !
  word ~
  word ?
  word :
  word ==
  word <=
  word >=
  word !=
  word &&
  word ||
  word ++
  word --
  word +
  word -
  word *
  word /
  word &
  word |
  word ^
  word %
  word <<
  word >>
  word >>>
  word +=
  word -=
  word *=
  word /=
  word &=
  word |=
  word ^=
  word %=
  word <<=
  word >>=
  word >>>=
